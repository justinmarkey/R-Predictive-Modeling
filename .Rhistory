defaultmodel$coefficients["MARRIAGE3"] - defaultmodel$coefficients["MARRIAGE1"]
LL.full<-as.numeric(logLik(defaultmodel))
null.defaultmodel<-glm(data=defaultdata,
family=binomial,
DEFAULT ~ 1)
LL.null<-as.numeric(logLik(null.defaultmodel))
mcfaddenrsqr <- 1-(LL.full)/(LL.null)
mcfaddenrsqr
predictiondata <- data.frame(LIMIT_BAL = c(50000),
SEX = c(1),
EDUCATION = c(5),
MARRIAGE = c(3),
BILL.AMT = c(2500),
PAY.AMT = c(1000)
)
predict.glm(defaultmodel, newdata = predictiondata, type = "response")
View(defaultdata)
defaultdata <- read.csv("data/HW5 Data.csv")
defaultdata$SEX <- factor(defaultdata$SEX)
defaultdata$EDUCATION <- factor(defaultdata$EDUCATION)
defaultdata$MARRIAGE <- factor(defaultdata$MARRIAGE)
defaultmodel <- glm(data = traindata, DEFAULT ~ LIMIT_BAL+SEX+EDUCATION+MARRIAGE+BILL.AMT+PAY.AMT, family = binomial)
summary(defaultmodel)
defaultdata <- read.csv("data/HW5 Data.csv")
defaultdata$SEX <- factor(defaultdata$SEX)
defaultdata$EDUCATION <- factor(defaultdata$EDUCATION)
defaultdata$MARRIAGE <- factor(defaultdata$MARRIAGE)
summary(defaultdata)
defaultmodel <- glm(data = traindata, DEFAULT ~ LIMIT_BAL+SEX+EDUCATION+MARRIAGE+BILL.AMT+PAY.AMT, family = binomial)
summary(defaultmodel)
defaultdata <- read.csv("data/HW5 Data.csv")
defaultdata$SEX <- factor(defaultdata$SEX)
defaultdata$EDUCATION <- factor(defaultdata$EDUCATION)
defaultdata$MARRIAGE <- factor(defaultdata$MARRIAGE)
summary(defaultdata)
predictiondata <- data.frame(LIMIT_BAL = c(50000),
SEX = c(1),
EDUCATION = c(5),
MARRIAGE = c(3),
BILL.AMT = c(2500),
PAY.AMT = c(1000)
)
mcfaddenrsqr
predictiondata <- data.frame(LIMIT_BAL = c(50000),
SEX = c(1),
EDUCATION = c(5),
MARRIAGE = c(3),
BILL.AMT = c(2500),
PAY.AMT = c(1000)
)
predict.glm(defaultmodel, newdata = predictiondata, type = "response")
predict(defaultmodel, newdata = predictiondata, type = "response")
predictiondata <- data.frame(LIMIT_BAL = c(50000),
SEX = 1,
EDUCATION = 5,
MARRIAGE = 3,
BILL.AMT = c(2500),
PAY.AMT = c(1000)
)
predict(defaultmodel, newdata = predictiondata, type = "response")
predictiondata <- data.frame(LIMIT_BAL = c(50000),
SEX = c(as.factor(1)),
EDUCATION = c(as.factor(5)),
MARRIAGE = c(as.factor(3)),
BILL.AMT = c(2500),
PAY.AMT = c(1000)
)
predict(defaultmodel, newdata = predictiondata, type = "response")
ageindefaultmodel<- glm(data=traindata, DEFAULT ~ ., family=binomial)
"model with age"
AIC(ageindefaultmodel)
"model without age"
AIC(defaultmodel)
ageindefaultmodel<- glm(data=traindata, DEFAULT ~ ., family=binomial)
summary(ageindefaultmodel)
ageindefaultmodel<- glm(data=traindata, DEFAULT ~ ., family=binomial)
summary(ageindefaultmodel)
"model with age"
AIC(ageindefaultmodel)
"model without age"
AIC(defaultmodel)
"model with age"
AIC(ageindefaultmodel)
"model without age"
AIC(defaultmodel)
setwd(".")
data1 = read.csv("")
setwd("C:/Projects/R/bizanalytics")
data1 = read.csv("data/quiz5 data.csv")
setwd("C:/Projects/R/bizanalytics")
defaultdata = read.csv("data/quiz5 data.csv")
View(defaultdata)
set.seed(12345)
row_ind<-sample(1:nrow(defaultdata),20000)
View(defaultdata)
defaultmodel <- glm(data = defaultdata, Win ~ ., family = binomial)
defaultmodel <- glm(data = defaultdata, Win ~ ., family = binomial)
summary(defaultmodel)
defaultmodel <- glm(data = defaultdata, Win ~ ., family = binomial)
summary(defaultmodel)
predictiondata <- data.frame(FG = c(38.7),
Rebounds = c(45),
Turnovers = c(20),
Home = c(as.factor(0))
)
# SPECIFY MODEL
predict(defaultmodel, newdata = predictiondata, type = "response")
defaultmodel <- glm(data = defaultdata, Win ~ ., family = binomial)
summary(defaultmodel)
setwd("C:/Projects/R/bizanalytics")
defaultdata = read.csv("data/quiz5 data.csv")
#defaultdata$Home <- factor(defaultdata$Home)
setwd("C:/Projects/R/bizanalytics")
defaultdata = read.csv("data/quiz5 data.csv")
defaultdata$Home <- factor(defaultdata$Home)
predictiondata <- data.frame(FG = c(38.7),
Rebounds = c(45),
Turnovers = c(20),
Home = c(as.factor(0))
)
# SPECIFY MODEL
predict(defaultmodel, newdata = predictiondata, type = "response")
predictiondata <- data.frame(FG = c(38.7),
Rebounds = c(45),
Turnovers = c(20),
Home = c(0)
)
# SPECIFY MODEL
predict(defaultmodel, newdata = predictiondata, type = "response")
predictiondata <- data.frame(FG = c(38.7),
Rebounds = c(45),
Turnovers = c(20),
Home = c(0)
)
# SPECIFY MODEL
predict(defaultmodel, newdata = predictiondata, type = "response")
LL.full<-as.numeric(logLik(defaultmodel))
null.defaultmodel<-glm(data=defaultdata,
family=binomial,
DEFAULT ~ 1)
LL.full<-as.numeric(logLik(defaultmodel))
null.defaultmodel<-glm(data=defaultdata,
family=binomial,
Win ~ 1)
LL.null<-as.numeric(logLik(null.defaultmodel))
mcfaddenrsqr <- 1-(LL.full)/(LL.null)
mcfaddenrsqr
LL.full<-as.numeric(logLik(defaultmodel))
null.defaultmodel<-glm(data=defaultdata,
family=binomial,
Win ~ 1)
LL.null<-as.numeric(logLik(null.defaultmodel))
mcfaddenrsqr <- 1-(LL.full)/(LL.null)
mcfaddenrsqr
setwd("C:/Projects/R/bizanalytics")
defaultdata = read.csv("data/quiz5 data.csv")
defaultdata$Home <- factor(defaultdata$Home)
defaultmodel <- glm(data = defaultdata, Win ~ ., family = binomial)
summary(defaultmodel)
predictiondata <- data.frame(FG = c(38.7),
Rebounds = c(45),
Turnovers = c(20),
Home = c(0)
)
# SPECIFY MODEL
predict(defaultmodel, newdata = predictiondata, type = "response")
predictiondata <- data.frame(FG = c(38.7),
Rebounds = c(45),
Turnovers = c(20),
Home = c(as.factor(0))
)
# SPECIFY MODEL
predict(defaultmodel, newdata = predictiondata, type = "response")
newmodel <- glm(data = defaultdata, Win ~ FG+Rebounds+Home, family = binomial)
summary(newmodel)
defaultmodel <- glm(data = defaultdata, Win ~ ., family = binomial)
aic(defaultmodel)
defaultmodel <- glm(data = defaultdata, Win ~ ., family = binomial)
AIC(defaultmodel)
summary(defaultmodel)
defaultmodel <- glm(data = defaultdata, Win ~ ., family = binomial)
AIC(defaultmodel)
summary(defaultmodel)
defaultmodel <- glm(data = defaultdata, Win ~ ., family = binomial)
AIC(defaultmodel)
summary(defaultmodel)
newmodel <- glm(data = defaultdata, Win ~ FG+Rebounds+Home, family = binomial)
AIC(newmodel)
summary(newmodel)
defaultmodel <- glm(data = defaultdata, Win ~ ., family = binomial)
AIC(defaultmodel)
summary(defaultmodel)
predictiondata <- data.frame(FG = c(38.7),
Rebounds = c(45),
Turnovers = c(20),
Home = c(as.factor(0))
)
# SPECIFY MODEL
predict(defaultmodel, newdata = predictiondata, type = "response")
LL.full<-as.numeric(logLik(defaultmodel))
null.defaultmodel<-glm(data=defaultdata,
family=binomial,
Win ~ 1)
LL.null<-as.numeric(logLik(null.defaultmodel))
mcfaddenrsqr <- 1-(LL.full)/(LL.null)
mcfaddenrsqr
LL.full<-as.numeric(logLik(defaultmodel))
null.defaultmodel<-glm(data=defaultdata,
family=binomial,
Win ~ 1)
LL.null<-as.numeric(logLik(null.defaultmodel))
mcfaddenrsqr <- 1-(LL.full)/(LL.null)
mcfaddenrsqr
defaultdata <- read.csv("data/HW7 Data.csv")
defaultdata$y <- ifelse(defaultdata$y == "yes", 1, 0)
set.seed(12345)
row_index<-sample(1:nrow(defaultdata),30000)
train<-defaultdata[row_index,]
valid<-defaultdata[-row_index,]
trainyes <-sum(ifelse(train[,"y"] == 1, 1, 0))
traintotal <- length(train[,"y"])
trainproportion = trainyes/traintotal
validyes <-sum(ifelse(valid[,"y"] == 1, 1, 0))
validtotal <- length(valid[,"y"])
validproportion = validyes/validtotal
trainproportion
validproportion
library(rpart)
library(rattle)
default.tree<-rpart(data=train, y~., method="class")
fancyRpartPlot(default.tree)
complicated.tree<-rpart(
data=train,
y~.,
method="class",
control=rpart.control(cp=0.0001))
plotcp(complicated.tree)
optimal.cp<-complicated.tree$cptable[which.min(complicated.tree$cptable[,"xerror"]),"CP"]
optimal.cp
optimal.tree<-prune(complicated.tree, cp=optimal.cp)
fancyRpartPlot(optimal.tree)
set.seed(67890)
library(randomForest)
forestmodel<- randomForest(data=train, as.factor(y)~., ntree=500, mtry=5)
defaultdata <- read.csv("data/HW7 Data.csv")
defaultdata$y <- ifelse(defaultdata$y == "yes", 1, 0)
set.seed(12345)
row_index<-sample(1:nrow(defaultdata),30000)
train<-defaultdata[row_index,]
valid<-defaultdata[-row_index,]
trainyes <-sum(ifelse(train[,"y"] == 1, 1, 0))
traintotal <- length(train[,"y"])
trainproportion = trainyes/traintotal
validyes <-sum(ifelse(valid[,"y"] == 1, 1, 0))
validtotal <- length(valid[,"y"])
validproportion = validyes/validtotal
trainproportion
validproportion
library(rpart)
library(rattle)
default.tree<-rpart(data=train, as.factor(y)~., method="class")
fancyRpartPlot(default.tree)
complicated.tree<-rpart(
data=train,
as.factor(y)~.,
method="class",
control=rpart.control(cp=0.0001))
plotcp(complicated.tree)
optimal.tree<-prune(complicated.tree, cp=optimal.cp)
fancyRpartPlot(optimal.tree)
in.sample.actual <- as.factor(train$y)
in.sample.pred.tree<-predict(optimal.tree)
in.sample.pred.forest<-predict(forestmodel, type="prob")
in.sample.actual <- as.factor(train$y)
in.sample.pred.tree<-predict(optimal.tree)
in.sample.pred.forest<-predict(forestmodel, type="prob")
ROSE::roc.curve(in.sample.actual, in.sample.pred.tree, plotit = FALSE)
in.sample.actual <- as.factor(train$y)
in.sample.pred.tree<-predict(optimal.tree)
in.sample.pred.forest<-predict(forestmodel, type="prob")[,2]
ROSE::roc.curve(in.sample.actual, in.sample.pred.tree, plotit = FALSE)
ROSE::roc.curve(in.sample.actual, in.sample.pred.tree, plotit = FALSE)
in.sample.actual <- train$y
in.sample.pred.tree<-predict(optimal.tree)
in.sample.pred.forest<-predict(forestmodel, type="prob")[,2]
ROSE::roc.curve(in.sample.actual, in.sample.pred.tree, plotit = FALSE)
in.sample.actual <- train$y
in.sample.pred.tree<-predict(optimal.tree, type = "prob")
in.sample.pred.tree
in.sample.pred.forest<-predict(forestmodel, type="prob")[,2]
in.sample.actual <- train$y
in.sample.pred.tree<-predict(optimal.tree, type = "prob")[,2]
in.sample.pred.forest<-predict(forestmodel, type="prob")[,2]
ROSE::roc.curve(in.sample.actual, in.sample.pred.tree, plotit = FALSE)
ROSE::roc.curve(in.sample.actual, in.sample.pred.forest, plotit = FALSE)
in.sample.actual <- train$y
in.sample.pred.tree<-predict(optimal.tree)[,2]
in.sample.pred.forest<-predict(forestmodel, type = "prob")[,2]
ROSE::roc.curve(in.sample.actual, in.sample.pred.tree, plotit = FALSE)
ROSE::roc.curve(in.sample.actual, in.sample.pred.forest, plotit = FALSE)
in.sample.actual <- as.factor(train$y)
in.sample.pred.tree<-predict(optimal.tree)[,2]
in.sample.pred.forest<-predict(forestmodel, type = "prob")[,2]
ROSE::roc.curve(in.sample.actual, in.sample.pred.tree, plotit = FALSE)
ROSE::roc.curve(in.sample.actual, in.sample.pred.forest, plotit = FALSE)
ROSE::roc.curve(in.sample.actual, in.sample.pred.tree, plotit = FALSE)
ROSE::roc.curve(in.sample.actual, in.sample.pred.forest, plotit = FALSE)
out.sample.actual <- as.factor(valid$y)
out.sample.pred.tree<-predict(optimal.tree, newdata=valid)[,2]
out.sample.pred.forest<-predict(forestmodel, newdata=valid, type="prob")[,2]
ROSE::roc.curve(out.sample.actual, out.sample.pred.tree, plotit = FALSE)
ROSE::roc.curve(out.sample.actual, out.sample.pred.forest, plotit = FALSE)
ROSE::roc.curve(in.sample.actual, in.sample.pred.tree, plotit = FALSE)
ROSE::roc.curve(in.sample.actual, in.sample.pred.forest, plotit = FALSE)
treeauc <- ROSE::roc.curve(in.sample.actual, in.sample.pred.tree, plotit = FALSE)
forestauc <- ROSE::roc.curve(in.sample.actual, in.sample.pred.forest, plotit = FALSE)
treeauc <- ROSE::roc.curve(in.sample.actual, in.sample.pred.tree, plotit = FALSE)
forestauc <- ROSE::roc.curve(in.sample.actual, in.sample.pred.forest, plotit = FALSE)
treeauc
forestauc
treeauc <- ROSE::roc.curve(in.sample.actual, in.sample.pred.tree, plotit = FALSE)
forestauc <- ROSE::roc.curve(in.sample.actual, in.sample.pred.forest, plotit = FALSE)
treeauc
forestauc
out.sample.actual <- as.factor(valid$y)
out.sample.pred.tree<-predict(optimal.tree, newdata=valid)[,2]
out.sample.pred.forest<-predict(forestmodel, newdata=valid, type="prob")[,2]
ROSE::roc.curve(out.sample.actual, out.sample.pred.tree, plotit = FALSE)
ROSE::roc.curve(out.sample.actual, out.sample.pred.forest, plotit = FALSE)
treeauc <- ROSE::roc.curve(in.sample.actual, in.sample.pred.tree, plotit = FALSE)
forestauc <- ROSE::roc.curve(in.sample.actual, in.sample.pred.forest, plotit = FALSE)
treeauc
forestauc
cwdir("./bizanalytics/")
setwd("./bizanalytics/")
install.packages("lmtest")
defaultdata <- read.csv("Q5.csv")
lmmodel <-lm(Consumption ~ Income)
lmmodel <-lm(Consumption ~ Income, data = defaultdata)
lmmodel
lmmodel <-lm(Consumption ~ Income, data = defaultdata)
lmmodel
newdata = data.frame(Income = c(75000))
predict(lmmodel, newdata)
defaultdata <- read.csv("Q5.csv")
defaultdata$Urban <- ifelse(defaultdata$Urban=="Urban",1,0)
lmmodel <-lm(Consumption ~ Income+factor(Urban), data = defaultdata)
lmmodel
newdata = data.frame(Income = c(75000), Urban = c(1))
predict(lmmodel, newdata)
lmmodel <-lm(Consumption ~ Income+Urban, data = defaultdata)
lmmodel
newdata = data.frame(Income = c(75000), Urban = c(1))
predict(lmmodel, newdata)
lmmodel <-lm(Consumption ~ Income+Urban, data = defaultdata)
lmmodel
newdata = data.frame(Income = c(75000), Urban = c(0))
predict(lmmodel, newdata)
lmmodel <-lm(Consumption ~ Income+Urban+Income*Urban, data = defaultdata)
lmmodel
newdata = data.frame(Income = c(75000), Urban = c(0))
predict(lmmodel, newdata)
lmmodel <-lm(Consumption ~ Income+Urban+Income*factor(Urban), data = defaultdata)
lmmodel
newdata = data.frame(Income = c(75000), Urban = c(0))
predict(lmmodel, newdata)
lmmodel <-lm(Consumption ~ Income+Urban+Income*Urban, data = defaultdata)
lmmodel
newdata = data.frame(Income = c(75000), Urban = c(0))
predict(lmmodel, newdata)
lmmodel <-lm(Consumption ~ Income+Urban+Income*Urban, data = defaultdata)
lmmodel
newdata = data.frame(Income = c(75000), Urban = c(1))
predict(lmmodel, newdata)
lmmodel <-lm(Consumption ~ Income+Urban+Income*Urban, data = defaultdata)
lmmodel
newdata = data.frame(Income = c(75000), Urban = c(1))
predict(lmmodel, newdata)
View(lmmodel)
lmmodel <-lm(Consumption ~ Income+Urban+Income*Urban, data = defaultdata)
summary(lmmodel)
newdata = data.frame(Income = c(75000), Urban = c(1))
predict(lmmodel, newdata)
lmmodel <-lm(Consumption ~ Income+Urban+Income*Urban, data = defaultdata)
summary(lmmodel)
#
#
# 3
newdata = data.frame(Income = c(75000), Urban = c(1))
predict(lmmodel, newdata)
lmmodel <-lm(Consumption ~ Income+Urban, data = defaultdata)
summary(lmmodel)
#
#
# 3 .6333
newdata = data.frame(Income = c(75000), Urban = c(1))
predict(lmmodel, newdata)
lmmodel <-lm(Consumption ~ Income, data = defaultdata)
summary(lmmodel)
#
# 2 .60
# 3 .6333
newdata = data.frame(Income = c(75000), Urban = c(1))
predict(lmmodel, newdata)
defaultdata <- read.csv("Q6.csv")
#defaultdata$Divorce <- ifelse(defaultdata$Divorce=="Urban",1,0)
logit.model <- glm(data = defaultdata, Divorce ~ Age+Income+Children)
summary(logit.model)
cutoff<-0.5
actual<-defaultdata$Divorce
pred<-predict(logit.model, type="response")
confusion.matrix<-table(actual, pred>cutoff)
cutoff<-0.5
actual<-defaultdata$Divorce
pred<-predict(logit.model, type="response")
confusion.matrix<-table(actual, pred>cutoff)
summary(confusion.matrix)
cutoff<-0.5
actual<-defaultdata$Divorce
pred<-predict(logit.model, type="response")
confusion.matrix<-table(actual, pred>cutoff)
confusion.matrix
# Accuracy
sum(diag(confusion.matrix))/sum(confusion.matrix)
# Sensitivity
confusion.matrix[2,2]/sum(confusion.matrix[2,])
# Specificity
confusion.matrix[1,1]/sum(confusion.matrix[1,])
library(rpart)
library(ROSE)
library(randomForest)
library(gains)
library(lmtest)
library(car)
roc.curve(actual,pred,plotit = FALSE)
logit.model <- glm(data = defaultdata, Divorce ~ Age+Income+Children)
summary(logit.model)
logit.model <- glm(data = defaultdata, Divorce ~ Age+Income+Children)
summary(logit.model)
odds.ratio(logit.model)
default.tree<-rpart(data=defaultdata, Divorce~., method="class")
default.tree<-rpart(data=defaultdata, Divorce~., method="class")
summary(default.tree)
default.tree<-rpart(data=defaultdata, Divorce~., method="class")
default.tree
library(rpart)
library(ROSE)
library(randomForest)
library(gains)
library(lmtest)
library(car)
library(rattle)
default.tree<-rpart(data=defaultdata, Divorce~., method="class")
rattle::fancyRpartPlot(default.tree)
default.tree$variable.importance
outsamplepred <- as.numeric(predict(default.tree)[,"1"])
roc.curve(actual,pred,plotit = FALSE)
roc.curve(actual, outsamplepred, plotit = FALSE)
outsamplepred <- as.numeric(predict(default.tree)[,"1"])
roc.curve(actual,pred,plotit = FALSE)
roc.curve(actual, outsamplepred, plotit = FALSE)
outsamplepred <- as.numeric(predict(default.tree)[,"1"])
roc.curve(actual,pred,plotit = FALSE)
roc.curve(actual, outsamplepred, plotit = FALSE)
mean(ifelse(
(pred>cutoff_prob&actual==1)|(pred<cutoff_prob&actual==0),
1,0))
outsamplepred <- as.numeric(predict(default.tree)[,"1"])
cutoff_prob = 0.5
roc.curve(actual,pred,plotit = FALSE)
roc.curve(actual, outsamplepred, plotit = FALSE)
mean(ifelse(
(pred>cutoff_prob&actual==1)|(pred<cutoff_prob&actual==0),
1,0))
mean(ifelse(
(outsamplepred>cutoff_prob&actual==1)|(outsamplepred<cutoff_prob&actual==0),
1,0))
logit.model <- glm(data = defaultdata, Divorce ~ .)
stepwise.mod<-step(full.mod, direction="backward", trace=FALSE)
logit.model <- glm(data = defaultdata, Divorce ~ .)
stepwise.mod<-step(logit.model, direction="backward", trace=FALSE)
summary(stepwise.mod)
View(defaultdata)
cutoff<-0.5
actual<-defaultdata$Divorce
pred<-predict(stepwise.mod, type="response")
confusion.matrix<-table(actual, pred>cutoff)
# Accuracy
sum(diag(confusion.matrix))/sum(confusion.matrix)
# Sensitivity
confusion.matrix[2,2]/sum(confusion.matrix[2,])
# Specificity
confusion.matrix[1,1]/sum(confusion.matrix[1,])
roc.curve(actual,pred,plotit = FALSE)
roc.curve(actual,pred,plotit = FALSE)
cutoff<-0.35
actual<-defaultdata$Divorce
pred<-predict(stepwise.mod, type="response")
confusion.matrix<-table(actual, pred>cutoff)
roc.curve(actual,pred,plotit = FALSE)
# Accuracy
sum(diag(confusion.matrix))/sum(confusion.matrix)
# Sensitivity
confusion.matrix[2,2]/sum(confusion.matrix[2,])
# Specificity
confusion.matrix[1,1]/sum(confusion.matrix[1,])
roc.curve(actual,pred,plotit = FALSE)
cutoff<-0.35
actual<-defaultdata$Divorce
pred<-predict(stepwise.mod, type="response")
confusion.matrix<-table(actual, pred>cutoff)
roc.curve(actual,pred,plotit = FALSE)
